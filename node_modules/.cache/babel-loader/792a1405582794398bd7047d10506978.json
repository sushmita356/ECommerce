{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/sushmita/Music/dashboardTASK/ECommerce/src/components/Shop.js\";\nimport React, { PureComponent } from \"react\";\nimport { CartComponent, ProductComponent, CheckoutButtonComponent, cartLocalization } from \"react-shopping-cart\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"animate.css/animate.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nconst {\n  getDefaultLocalization\n} = cartLocalization; // You may take localization object from wherever you want, that's just an example\n// For more information, see localization section\n\nconst iPadCaseLocalization = {\n  color: \"Color\",\n  iPadCase: \"iPad case\",\n  red: \"Red\",\n  green: \"Green\",\n  yellow: \"Yellow\",\n  GBP: \"£\",\n  EUR: \"€\",\n  USD: \"$\"\n};\nconst iPadPropertiesWithAdditionalCostLocalization = {\n  yellow: \"Yellow (+{cost}{localizedCurrency})\"\n};\n\nclass App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: {},\n      product: {\n        name: \"iPadCase\",\n        id: \"ipad-case\",\n        path: \"/shop/ipad-case/\",\n        properties: {\n          color: [\"red\", \"green\", {\n            additionalCost: {\n              GBP: 1,\n              EUR: 2,\n              USD: 3.5\n            },\n            value: \"yellow\"\n          }]\n        },\n        propertiesToShowInCart: [\"color\"],\n        prices: {\n          GBP: 70,\n          EUR: 80,\n          USD: 90\n        },\n        currency: \"GBP\",\n        imageSrc: \"1-483x321.jpeg\"\n      },\n      getProductLocalization: getDefaultLocalization(\"product\", \"en\", { ...iPadCaseLocalization,\n        ...iPadPropertiesWithAdditionalCostLocalization\n      }),\n      getCheckoutButtonLocalization: getDefaultLocalization(\"checkoutButton\", \"en\", iPadCaseLocalization),\n      getCartLocalization: getDefaultLocalization(\"cart\", \"en\", iPadCaseLocalization)\n    };\n\n    this.addProduct = (key, product, currency) => void this.setState(({\n      products: {\n        [key]: cartProduct = {\n          quantity: 0\n        },\n        ...restOfProducts\n      }\n    }) => ({\n      products: { ...restOfProducts,\n        [key]: { ...product,\n          quantity: product.quantity + cartProduct.quantity\n        }\n      }\n    }));\n\n    this.generateProductKey = (id, properties) => `${id}/${Object.entries(properties).join(\"_\")}`;\n\n    this.updateProduct = (key, updatedProduct) => void console.log(\":)\");\n\n    this.removeProduct = key => void console.log(\":C\");\n  }\n\n  render() {\n    const {\n      addProduct,\n      generateProductKey,\n      updateProduct,\n      removeProduct,\n      state\n    } = this;\n    const {\n      getProductLocalization,\n      getCheckoutButtonLocalization,\n      getCartLocalization,\n      products,\n      product\n    } = state;\n\n    const checkoutButtonElement = /*#__PURE__*/_jsxDEV(CheckoutButtonComponent, {\n      grandTotal: 500,\n      hidden: false,\n      checkoutURL: \"/to/my/checkout\",\n      currency: \"GBP\",\n      getLocalization: getCheckoutButtonLocalization\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ProductComponent, { ...product,\n        checkoutButton: checkoutButtonElement,\n        onAddProduct: addProduct // Help product to get into the cart\n        ,\n        generateProductKey: generateProductKey // create product key as you wish\n        ,\n        getLocalization: getProductLocalization\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CartComponent, {\n        products: products // Provide your own product's Object(Look at Products)\n        ,\n        onUpdateProduct: updateProduct // Update something\n        ,\n        getLocalization: getCartLocalization,\n        currency: \"GBP\",\n        onRemoveProduct: removeProduct // Remove something\n        ,\n        checkoutButton: checkoutButtonElement,\n        isCartEmpty: false,\n        getLocalization: getCartLocalization\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/sushmita/Music/dashboardTASK/ECommerce/src/components/Shop.js"],"names":["React","PureComponent","CartComponent","ProductComponent","CheckoutButtonComponent","cartLocalization","getDefaultLocalization","iPadCaseLocalization","color","iPadCase","red","green","yellow","GBP","EUR","USD","iPadPropertiesWithAdditionalCostLocalization","App","state","products","product","name","id","path","properties","additionalCost","value","propertiesToShowInCart","prices","currency","imageSrc","getProductLocalization","getCheckoutButtonLocalization","getCartLocalization","addProduct","key","setState","cartProduct","quantity","restOfProducts","generateProductKey","Object","entries","join","updateProduct","updatedProduct","console","log","removeProduct","render","checkoutButtonElement"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport {\n  CartComponent,\n  ProductComponent,\n  CheckoutButtonComponent,\n  cartLocalization\n} from \"react-shopping-cart\";\n \nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"animate.css/animate.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n \nconst { getDefaultLocalization } = cartLocalization;\n \n// You may take localization object from wherever you want, that's just an example\n// For more information, see localization section\nconst iPadCaseLocalization = {\n  color: \"Color\",\n  iPadCase: \"iPad case\",\n  red: \"Red\",\n  green: \"Green\",\n  yellow: \"Yellow\",\n  GBP: \"£\",\n  EUR: \"€\",\n  USD: \"$\"\n};\n \nconst iPadPropertiesWithAdditionalCostLocalization = {\n  yellow: \"Yellow (+{cost}{localizedCurrency})\"\n};\n \nclass App extends PureComponent {\n  state = {\n    products: {},\n    product: {\n      name: \"iPadCase\",\n      id: \"ipad-case\",\n      path: \"/shop/ipad-case/\",\n      properties: {\n        color: [\n          \"red\",\n          \"green\",\n          {\n            additionalCost: {\n              GBP: 1,\n              EUR: 2,\n              USD: 3.5\n            },\n            value: \"yellow\"\n          }\n        ]\n      },\n      propertiesToShowInCart: [\"color\"],\n      prices: { GBP: 70, EUR: 80, USD: 90 },\n      currency: \"GBP\",\n      imageSrc: \"1-483x321.jpeg\"\n    },\n    getProductLocalization: getDefaultLocalization(\"product\", \"en\", {\n      ...iPadCaseLocalization,\n      ...iPadPropertiesWithAdditionalCostLocalization\n    }),\n    getCheckoutButtonLocalization: getDefaultLocalization(\n      \"checkoutButton\",\n      \"en\",\n      iPadCaseLocalization\n    ),\n    getCartLocalization: getDefaultLocalization(\n      \"cart\",\n      \"en\",\n      iPadCaseLocalization\n    )\n  };\n \n  addProduct = (key, product, currency) =>\n    void this.setState(\n      ({\n        products: { [key]: cartProduct = { quantity: 0 }, ...restOfProducts }\n      }) => ({\n        products: {\n          ...restOfProducts,\n          [key]: {\n            ...product,\n            quantity: product.quantity + cartProduct.quantity\n          }\n        }\n      })\n    );\n \n  generateProductKey = (id, properties) =>\n    `${id}/${Object.entries(properties).join(\"_\")}`;\n \n  updateProduct = (key, updatedProduct) => void console.log(\":)\");\n \n  removeProduct = key => void console.log(\":C\");\n \n  render() {\n    const {\n      addProduct,\n      generateProductKey,\n      updateProduct,\n      removeProduct,\n      state \n    } = this;\n \n    const {\n      getProductLocalization,\n      getCheckoutButtonLocalization,\n      getCartLocalization,\n      products,\n      product \n    } = state;\n \n    const checkoutButtonElement = (\n      <CheckoutButtonComponent\n        grandTotal={500}\n        hidden={false}\n        checkoutURL=\"/to/my/checkout\"\n        currency=\"GBP\"\n        getLocalization={getCheckoutButtonLocalization}\n      />\n    );\n    return (\n      <div className=\"container\">\n        <ProductComponent\n          {...product}\n          checkoutButton={checkoutButtonElement}\n          onAddProduct={\n            addProduct\n            // Help product to get into the cart\n          }\n          generateProductKey={\n            generateProductKey\n            // create product key as you wish\n          }\n          getLocalization={getProductLocalization}\n        />\n \n        <CartComponent\n          products={\n            products\n            // Provide your own product's Object(Look at Products)\n          }\n          onUpdateProduct={\n            updateProduct\n            // Update something\n          }\n          getLocalization={getCartLocalization}\n          currency=\"GBP\"\n          onRemoveProduct={\n            removeProduct\n            // Remove something\n          }\n          checkoutButton={checkoutButtonElement}\n          isCartEmpty={false}\n          getLocalization={getCartLocalization}\n        />\n      </div>\n    );\n  }\n}\n \nexport default App;\n"]},"metadata":{},"sourceType":"module"}